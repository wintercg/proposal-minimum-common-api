<pre class='metadata'>
Title: Minimum Common Web Platform API
Shortname: minimum-common-api
Group: wintercg
Status: w3c/CG-DRAFT
Level: none
URL: https://min-common-api.proposal.wintertc.org/
Repository: https://github.com/wintercg/proposal-minimum-common-api
Editor: James M Snell, Cloudflare https://cloudflare.com/, jsnell@cloudflare.com
Abstract: Minimum Common Web Platform API for Non-Browser ECMAScript-based runtimes.
Markup Shorthands: markdown yes
</pre>
<pre class=link-defaults>
spec:url; type:interface; text:URL
spec:html; type:attribute; for:Window; text:navigator
spec:fetch; type:method; text:fetch()
</pre>

Introduction {#intro}
=====================

*This section is non-normative.*

The Minimum Common Web Platform API is a curated subset of standardized Web Platform APIs intended to define a minimum set of capabilities common to Browser and Non-Browser JavaScript-based runtime environments.

Terminology {#terminology}
==========================

The Web Platform is the combination of technology standards defined by organizations such as the W3C, the WHATWG, and others as implemented by Web Browsers.

A <dfn>Web-interoperable Runtime</dfn> is any ECMAScript-based application runtime environment that implements the subset of Web Platform APIs outlined in this specification.
While this term is intentionally broad to also encompass Web Browsers, the primary focus here is on outlining expectations for non-browser runtimes.

Common API Index {#api-index}
=========================

All <a>Web-interoperable Runtimes</a> conforming to this specification SHALL implement each of the following Web Platform APIs in accordance with their normative requirements except where modified here. Where any conforming runtime environment chooses (either by necessity or otherwise) to diverge from a normative requirement of the specification, clear explanations of such divergence MUST be made clearly and readily available in the documentation.

Interfaces:

* {{AbortController}}
* {{AbortSignal}}
* {{Blob}}
* {{ByteLengthQueuingStrategy}}
* <code class="idl"><a data-link-type="idl" href="https://wicg.github.io/compression/#compression-stream">CompressionStream</a></code>
* {{CountQueuingStrategy}}
* {{Crypto}}
* {{CryptoKey}}
* {{CustomEvent}}
* <code class="idl"><a data-link-type="idl" href="https://wicg.github.io/compression/#decompression-stream">DecompressionStream</a></code>
* {{DOMException}}
* {{ErrorEvent}}
* {{Event}}
* {{EventTarget}}
* {{File}}
* {{FormData}}

    Issue: The {{FormData}} constructor optionally takes {{HTMLFormElement}} and {{HTMLElement}} as parameters.
    TODO: Figure out what implementations without DOM support should do here.
    Node.js and Deno throw if the first parameter is not `undefined` but ignore the second parameter.
    Cloudflare Workers ignores all parameters.

* {{Headers}}
* {{PromiseRejectionEvent}}
* {{ReadableByteStreamController}}
* {{ReadableStream}}
* {{ReadableStreamBYOBReader}}
* {{ReadableStreamBYOBRequest}}
* {{ReadableStreamDefaultController}}
* {{ReadableStreamDefaultReader}}
* {{Request}}
* {{Response}}
* {{SubtleCrypto}}
* {{TextDecoder}}
* {{TextDecoderStream}}
* {{TextEncoder}}
* {{TextEncoderStream}}
* {{TransformStream}}
* {{TransformStreamDefaultController}}
* {{URL}}
* {{URLPattern}}
* {{URLSearchParams}}
* {{WebAssembly}}.<l spec="wasm-js-api">{{Global}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Instance}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Memory}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Module}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Table}}</l>
* {{WritableStream}}
* {{WritableStreamDefaultController}}
* {{WritableStreamDefaultWriter}}

Global methods / properties:

* <code class="idl"><a data-link-type="idl" href="https://tc39.es/ecma262/multipage/global-object.html#sec-globalthis">globalThis</a></code>
* globalThis.{{atob()}}
* globalThis.{{btoa()}}
* globalThis.{{console}}
* globalThis.{{crypto}}
* globalThis.{{fetch()}}
* globalThis.{{navigator}}.{{userAgent}}
* globalThis.onerror (on {{GlobalEventHandlers/onerror|Window}} and {{WorkerGlobalScope/onerror|WorkerGlobalScope}})
* globalThis.onunhandledrejection (on {{WindowEventHandlers/onunhandledrejection|Window}} and {{WorkerGlobalScope/onunhandledrejection|WorkerGlobalScope}})
* globalThis.onrejectionhandled (on {{WindowEventHandlers/onrejectionhandled|Window}} and {{WorkerGlobalScope/onrejectionhandled|WorkerGlobalScope}})
* globalThis.{{performance}}.{{Performance/now()}}
* globalThis.{{performance}}.{{timeOrigin}}
* globalThis.{{queueMicrotask()}}
* globalThis.{{reportError()}}
* globalThis.self (on {{Window/self|Window}} and {{WorkerGlobalScope/self|WorkerGlobalScope}})

    Note: This returns the value of `globalThis`.

    Issue: When the <a href="https://github.com/whatwg/html/pull/9893">ShadowRealm integration PR</a>
    is merged into the HTML spec,
    `self` will also need to be exposed on `ShadowRealmGlobalScope`.

* globalThis.{{setTimeout()}} / globalThis.{{clearTimeout()}}
* globalThis.{{setInterval()}} / globalThis.{{clearInterval()}}
* globalThis.{{structuredClone()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/compile()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/compileStreaming()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/instantiate()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/instantiateStreaming()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/validate()}}

The Global Scope {#global-scope}
================================

The exact type of the global scope (`globalThis`) can vary across runtimes. Most Web Platform APIs are defined in terms that assume Web Browser environments that specifically expose types like {{Window}}, {{Worker}}, {{WorkerGlobalScope}}, and so forth. To simplify conformance, all Interfaces, methods, and properties defined by this specification MUST be exposed on the runtime's relevant global scope (e,g., `globalThis.crypto`, `globalThis.ReadableStream`, etc).

With many runtimes, adding a new global-scoped property can introduce breaking changes when the new global conflicts with existing application code. Many Web Platform APIs define global properties using the `readonly` attribute. To avoid introducing breaking changes, runtimes conforming to this specification MAY choose to ignore the `readonly` attribute for properties being added to the global scope.

The global object on {{Window}}-like and worker environments must always be an instance of {{EventTarget}}. Web-interoperable runtimes must follow the <a>report an exception</a> algorithm, and the JavaScript <a href="https://tc39.es/ecma262/#sec-host-promise-rejection-tracker">HostPromiseRejectionTracker</a> host hook, as defined in [[HTML]]. This includes firing the {{Window/error}}, {{Window/unhandledrejection}} and {{Window/rejectionhandled}} events on the global object.

Note: Some runtimes might not support firing those events following the HTML specification exactly due to legacy reasons.
For example, in Node.js the global object does not implement {{EventTarget}}, and the relevant events are fired on the `process` object with the names `uncaughtException`, `unhandledRejection` and `rejectionHandled`, respectively.
Such runtimes should not support the {{GlobalEventHandlers/onerror}}, {{WindowEventHandlers/onunhandledrejection}} and {{WindowEventHandlers/onrejectionhandled}} global properties, but they might implement the {{ErrorEvent}} and {{PromiseRejectionEvent}} interfaces.

Requirements for navigator.userAgent {#navigator-useragent-requirements}
========================================================================

The globalThis.{{navigator}}.{{userAgent}} property is provided such that application code can reliably identify the runtime within which it is running.
The value of the property is a string conforming to the <code class="idl"><a data-link-type="idl" href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.3">`User-Agent`</a></code> construction in RFC 7231:

<pre>
  User-Agent      = product *( RWS ( product / comment ) )
  product         = token ["/" product-version]
  product-version = token
</pre>

While runtimes that implement globalThis.{{navigator}}.{{userAgent}} MUST provide a value that is conformant with the structure defined by RFC 7231, the value SHOULD be treated as a single, complete, opaque, unstructured value. It is RECOMMENDED that the value be limited to a single `product` token excluding the optional `product-version`. For instance, `navigator.userAgent = 'MyRuntime'`. The value SHOULD NOT include any `comment` components.

Extensions {#extensions}
========================

Runtime-specific extensions to any Web Platform API MAY be implemented by conforming runtimes. Such extensions MUST be defined so that their use neither contradicts nor causes the non-conformance of normative functionality of any Web Platform API.

Application use of such extensions must be carefully considered, as doing so reduces interoperability and portability of code across runtimes.
